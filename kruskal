import java.util.*;

public class Kruskal {
    
    public static class Edge {
        public int u;
        public int v;
        public int w;

        public Edge(int u, int v, int w) {
            this.u = u;
            this.v = v;
            this.w = w;
        }

        public int getU() {
            return u;
        }

        public int getV() {
            return v;
        }

        public int getW() {
            return w;
        }
    }

    public static class EdgeComparator implements Comparator<Edge> {
        public int compare(Edge e1, Edge e2) {
            if (e1.w < e2.w) {
                return -1;
            } else if (e1.w > e2.w) {
                return 1;
            }
            return 0;
        }
    }

    public void kruskalMST() {
        // Initialize the minimum heap to store the edges
        PriorityQueue<Edge> minHeap = new PriorityQueue<>(new EdgeComparator());
        
        // Sample graph with edges and weights
        int n = 7; // Number of vertices
        int[][] edges = {
            {0, 1, 28}, {1, 2, 16}, {2, 3, 12}, 
            {3, 4, 22}, {4, 5, 25}, {5, 0, 10}, 
            {1, 6, 14}, {3, 6, 18}, {4, 6, 24}
        };

        for (int[] edge : edges) {
            minHeap.add(new Edge(edge[0], edge[1], edge[2]));
        }

        int[] parent = new int[n];
        int[] rank = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            rank[i] = 0;
        }

        int minCost = 0;
        ArrayList<Edge> mst = new ArrayList<>();

        while (!minHeap.isEmpty() && mst.size() < n - 1) {
            Edge e = minHeap.poll();
            int u = e.getU();
            int v = e.getV();
            int w = e.getW();

            int rootU = find(parent, u);
            int rootV = find(parent, v);

            if (rootU != rootV) {
                mst.add(e);
                minCost += w;
                union(parent, rank, rootU, rootV);
            }
        }

        // Print the result
        if (mst.size() == n - 1) {
            System.out.println("Edges in the Minimum Spanning Tree:");
            for (Edge e : mst) {
                System.out.println(e.u + " -- " + e.v + " == " + e.w);
            }
            System.out.println("Minimum Cost: " + minCost);
        } else {
            System.out.println("No spanning tree");
        }
    }

    public int find(int[] parent, int i) {
        if (parent[i] != i) {
            parent[i] = find(parent, parent[i]);
        }
        return parent[i];
    }

    public void union(int[] parent, int[] rank, int u, int v) {
        int rootU = find(parent, u);
        int rootV = find(parent, v);

        if (rank[rootU] < rank[rootV]) {
            parent[rootU] = rootV;
        } else if (rank[rootU] > rank[rootV]) {
            parent[rootV] = rootU;
        } else {
            parent[rootV] = rootU;
            rank[rootU]++;
        }
    }

    public static void main(String[] args) {
        Kruskal kruskal = new Kruskal();
        kruskal.kruskalMST();
    }
}
